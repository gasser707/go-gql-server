apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-persistent-storage
spec:
  storageClassName: ""
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-volumeclaim
spec:
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql-db
    spec:
      containers:
        - image: mysql:latest
          name: mysql-db
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: pwd
              # valueFrom:
              #   secretKeyRef:
              #     name: mysql
              #     key: password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/minesql
            - name: mysql-initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-volumeclaim
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config


---
apiVersion: v1
kind: Service
metadata:
  name: mysql-srv
spec:
  selector:
    app: mysql-db
  ports:
    - name: db
      port: 3306
      targetPort: 3306
      protocol: TCP


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  initdb.sql: |
    CREATE DATABASE IF NOT EXISTS shotify_db;
    USE shotify_db;

    CREATE TABLE users (
    id int NOT NULL primary key AUTO_INCREMENT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    username VARCHAR(30) NOT NULL,
    role enum('ADMIN', 'MODERATOR', 'USER') NOT NULL,
    bio VARCHAR(400) NOT NULL,
    avatar VARCHAR(300) NOT NULL,
    email VARCHAR(80) NOT NULL,
    password VARCHAR(500) NOT NULL
    );

    CREATE TABLE images (
    id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    url VARCHAR(500) NOT NULL,
    description VARCHAR(400) NOT NULL,
    user_id int NOT NULL,
    title VARCHAR(100) NOT NULL,
    price double NOT NULL,
    forSale Boolean NOT NULL,
    private Boolean NOT NULL
    );

    CREATE TABLE sales (
    id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
    image_id int NOT NULL,
    buyer_id int NOT NULL,
    seller_id int NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
      price double NOT NULL,
    UNIQUE(image_id, buyer_id, seller_id),
      CONSTRAINT CHK_IDs CHECK(buyer_id != seller_id)
    );


    CREATE TABLE labels (
    id int NOT NULL PRIMARY KEY  AUTO_INCREMENT,
    tag VARCHAR(25) NOT NULL,
      image_id int NOT NULL,
      UNIQUE(tag, image_id)
    );


    ALTER TABLE images ADD CONSTRAINT image_user_fkey FOREIGN KEY (user_id) REFERENCES users(id);


    ALTER TABLE sales ADD CONSTRAINT sale_image_fkey FOREIGN KEY (image_id) REFERENCES images(id);
    ALTER TABLE sales ADD CONSTRAINT sale_seller_fkey FOREIGN KEY (seller_id) REFERENCES users(id);
    ALTER TABLE sales ADD CONSTRAINT sale_buyer_fkey FOREIGN KEY (buyer_id) REFERENCES users(id);


    ALTER TABLE labels ADD CONSTRAINT label_image_fkey FOREIGN KEY (image_id) REFERENCES images(id) ON DELETE CASCADE;

