# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: redis-pv
# spec:
#   storageClassName: ""
#   capacity:
#     storage: 1Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#    path: "/mnt/data"

# ---

# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: redisdb-pvc
# spec:
#   storageClassName: ""
#   accessModes:
#   - ReadWriteOnce
#   resources:
#     requests:
#       storage: 1Gi
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: redis-depl
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: redis-db
#   template:
#     metadata:
#       labels:
#         app: redis-db
#     spec:
#       containers:
#         - name: redis-db
#           image: redis:6.2
#           ports:
#            - containerPort: 6379
#           volumeMounts:
#            - mountPath: /data
#              name: redis-pv
#           resources:
#             requests:
#               memory: 50Mi
#               cpu: 20m
#             limits:
#               memory: 100Mi
#               cpu: 100m
#       volumes:
#       - name: redis-pv
#         persistentVolumeClaim:
#           claimName: redisdb-pvc
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: redis-srv
# spec:
#   selector:
#     app: redis-db
#   ports:
#     - name: db
#       protocol: TCP
#       port: 6379
#       targetPort: 6379


apiVersion: v1
kind: Service
metadata:
  name: redis-srv
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  clusterIP: None
  selector:
    app: redis
    statefulset.kubernetes.io/pod-name: redis-0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  master.conf: |
    bind 0.0.0.0
    protected-mode yes
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
  slave.conf: |
    slaveof redis-0.redis 6379

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis-srv
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      initContainers:
      - name: init-redis
        image: redis:4.0.9
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.conf /etc/redis.conf
          else
            cp /mnt/config-map/slave.conf /etc/redis.conf
          fi
        volumeMounts:
        - name: conf
          mountPath: /etc
          subPath: redis.conf
        - name: config-map
          mountPath: /mnt/config-map
      containers:
      - name: redis
        image: redis:4.0.9
        command: ["redis-server"]
        args: ["/etc/redis.conf"]
        env:
        - name: ALLOW_EMPTY_PASSWORD 
          value: "yes"
        ports:
        - name: redis
          containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: conf
          mountPath: /etc/
          subPath: redis.conf
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: redis-config        
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi


