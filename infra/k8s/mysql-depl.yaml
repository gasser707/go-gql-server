# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: mysql-persistent-storage
# spec:
#   storageClassName: ""
#   capacity:
#     storage: 1Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: "/mnt/data"

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mysql-volumeclaim
# spec:
#   storageClassName: ""
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 1Gi

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mysql-depl
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: mysql-db
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       labels:
#         app: mysql-db
#     spec:
#       containers:
#         - image: mysql:8.0.27
#           name: mysql-db
#           env:
#             - name: MYSQL_ROOT_PASSWORD
#               value: pwd
#               # valueFrom:
#               #   secretKeyRef:
#               #     name: mysql
#               #     key: password
#           readinessProbe:
#             exec:
#               command:
#               - bash
#               - "-c"
#               - mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD
#             initialDelaySeconds: 35
#             periodSeconds: 10
#             failureThreshold: 10
#           ports:
#             - containerPort: 3306
#           volumeMounts:
#             - name: mysql-persistent-storage
#               mountPath: /var/lib/minesql
#             - name: mysql-initdb
#               mountPath: /docker-entrypoint-initdb.d
#           resources:
#             requests:
#               memory: "500Mi"
#               cpu: 500m
#             limits:
#               memory: "900Mi"
#               cpu: 1000m
#       volumes:
#         - name: mysql-persistent-storage
#           persistentVolumeClaim:
#             claimName: mysql-volumeclaim
#         - name: mysql-initdb
#           configMap:
#             name: mysql-initdb-config


# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mysql-srv
# spec:
#   selector:
#     app: mysql-db
#   ports:
#     - name: db
#       port: 3306
#       targetPort: 3306
#       protocol: TCP


apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  labels:
    app: mysql
data:
  primary.cnf: |
    # Apply this config only on the primary.
    [mysqld]
    log-bin    
  replica.cnf: |
    # Apply this config only on replicas.
    [mysqld]
    super-read-only    

---
# Headless service for stable DNS entries of StatefulSet members.
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  clusterIP: None
  selector:
    app: mysql
  



---
# Client service for connecting to any MySQL instance for reads.
# For writes, you must instead connect to the primary: mysql-0.mysql.
apiVersion: v1
kind: Service
metadata:
  name: mysql-read
  labels:
    app: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app: mysql
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/primary.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/replica.cnf /mnt/conf.d/
          fi          
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d

      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on primary (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # Clone data from previous peer.
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql          
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:5.7
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-pass
                key: MYSQL_ROOT_PASSWORD
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: mysql-dbname
                key: MYSQL_DBNAME
          - name: MYSQL_USER
            value: gman
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-user-pass
                key: MYSQL_PASSWORD
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
               command: ["mysqladmin", "-uroot", "-p$MYSQL_ROOT_PASSWORD", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -ec
            - >-
              mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PASSWORD -e'SELECT 1'
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-pass
                key: MYSQL_ROOT_PASSWORD
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
            # XtraBackup already generated a partial "CHANGE MASTER TO" query
            # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
            cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_slave_info xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from primary. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm -f xtrabackup_binlog_info xtrabackup_slave_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -h 127.0.0.1 -uroot -p$MYSQL_ROOT_PASSWORD -e "SELECT 1"; do sleep 1; done

            echo "Initializing replication from clone position"
            mysql -h 127.0.0.1 -uroot -p$MYSQL_ROOT_PASSWORD \
                  -e "$(<change_master_to.sql.in), \
                          MASTER_HOST='mysql-0.mysql', \
                          MASTER_USER='root', \
                          MASTER_PASSWORD='$MYSQL_ROOT_PASSWORD', \
                          MASTER_CONNECT_RETRY=10; \
                        START SLAVE USER='root' PASSWORD='$MYSQL_ROOT_PASSWORD';" || exit 1
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
          fi

          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=$MYSQL_ROOT_PASSWORD"          
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 2Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  initdb.sql: |
        USE shotify_db;

        CREATE TABLE users (
          id int NOT NULL primary key AUTO_INCREMENT,
          created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          username VARCHAR(30) NOT NULL,
          role enum('ADMIN', 'MODERATOR', 'USER') NOT NULL,
          bio VARCHAR(400) NOT NULL,
          avatar VARCHAR(300) NOT NULL DEFAULT '',
          email VARCHAR(80) NOT NULL,
          verified Boolean NOT NULL DEFAULT true,
          UNIQUE(email),
          password VARCHAR(500) NOT NULL
        );

        CREATE TABLE images (
          id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
          url VARCHAR(500) NOT NULL DEFAULT '',
          description VARCHAR(400) NOT NULL,
          user_id int NOT NULL,
          title VARCHAR(100) NOT NULL,
          price double NOT NULL,
          forSale Boolean NOT NULL,
          private Boolean NOT NULL,
          archived Boolean NOT NULL DEFAULT 0,
          discountPercent int NOT NULL DEFAULT 0
        );

        CREATE TABLE sales (
          id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
          image_id int NOT NULL,
          buyer_id int NOT NULL,
          seller_id int NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
            price double NOT NULL,
          UNIQUE(image_id, buyer_id, seller_id),
            CONSTRAINT CHK_IDs CHECK(buyer_id != seller_id)
        );


        CREATE TABLE labels (
          id int NOT NULL PRIMARY KEY  AUTO_INCREMENT,
          tag VARCHAR(25) NOT NULL,
            image_id int NOT NULL,
            UNIQUE(tag, image_id)
        );


        ALTER TABLE images ADD CONSTRAINT image_user_fkey FOREIGN KEY (user_id) REFERENCES users(id);


        ALTER TABLE sales ADD CONSTRAINT sale_image_fkey FOREIGN KEY (image_id) REFERENCES images(id);
        ALTER TABLE sales ADD CONSTRAINT sale_seller_fkey FOREIGN KEY (seller_id) REFERENCES users(id);
        ALTER TABLE sales ADD CONSTRAINT sale_buyer_fkey FOREIGN KEY (buyer_id) REFERENCES users(id);


        ALTER TABLE labels ADD CONSTRAINT label_image_fkey FOREIGN KEY (image_id) REFERENCES images(id) ON DELETE CASCADE;
