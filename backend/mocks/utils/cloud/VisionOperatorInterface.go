// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// VisionOperatorInterface is an autogenerated mock type for the VisionOperatorInterface type
type VisionOperatorInterface struct {
	mock.Mock
}

// DetectImgProps provides a mock function with given fields: ctx, source
func (_m *VisionOperatorInterface) DetectImgProps(ctx context.Context, source string) ([]string, error) {
	ret := _m.Called(ctx, source)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, source)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetectLocalImgProps provides a mock function with given fields: ctx, imgReader
func (_m *VisionOperatorInterface) DetectLocalImgProps(ctx context.Context, imgReader io.Reader) ([]string, error) {
	ret := _m.Called(ctx, imgReader)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) []string); ok {
		r0 = rf(ctx, imgReader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, io.Reader) error); ok {
		r1 = rf(ctx, imgReader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
