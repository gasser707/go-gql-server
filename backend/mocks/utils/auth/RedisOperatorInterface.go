// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	auth "github.com/gasser707/go-gql-server/utils/auth"
	mock "github.com/stretchr/testify/mock"
)

// RedisOperatorInterface is an autogenerated mock type for the RedisOperatorInterface type
type RedisOperatorInterface struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: _a0, _a1
func (_m *RedisOperatorInterface) CreateAuth(_a0 string, _a1 *auth.TokenDetails) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *auth.TokenDetails) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRefresh provides a mock function with given fields: _a0
func (_m *RedisOperatorInterface) DeleteRefresh(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTokens provides a mock function with given fields: _a0
func (_m *RedisOperatorInterface) DeleteTokens(_a0 *auth.AccessDetails) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*auth.AccessDetails) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAuth provides a mock function with given fields: tokenUuid, csrfUuid
func (_m *RedisOperatorInterface) FetchAuth(tokenUuid string, csrfUuid string) (string, error) {
	ret := _m.Called(tokenUuid, csrfUuid)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(tokenUuid, csrfUuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenUuid, csrfUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchRefresh provides a mock function with given fields: refreshUuid
func (_m *RedisOperatorInterface) FetchRefresh(refreshUuid string) (string, error) {
	ret := _m.Called(refreshUuid)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(refreshUuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
