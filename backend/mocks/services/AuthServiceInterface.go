// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/gasser707/go-gql-server/graphql/model"
	mock "github.com/stretchr/testify/mock"

	services "github.com/gasser707/go-gql-server/services"
)

// AuthServiceInterface is an autogenerated mock type for the AuthServiceInterface type
type AuthServiceInterface struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, input
func (_m *AuthServiceInterface) Login(ctx context.Context, input model.LoginInput) (bool, error) {
	ret := _m.Called(ctx, input)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginInput) bool); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.LoginInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx
func (_m *AuthServiceInterface) Logout(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoutAll provides a mock function with given fields: ctx
func (_m *AuthServiceInterface) LogoutAll(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPasswordReset provides a mock function with given fields: ctx, resetToken, newPass
func (_m *AuthServiceInterface) ProcessPasswordReset(ctx context.Context, resetToken string, newPass string) (bool, error) {
	ret := _m.Called(ctx, resetToken, newPass)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, resetToken, newPass)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, resetToken, newPass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshCredentials provides a mock function with given fields: ctx
func (_m *AuthServiceInterface) RefreshCredentials(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestPasswordReset provides a mock function with given fields: ctx, email
func (_m *AuthServiceInterface) RequestPasswordReset(ctx context.Context, email string) (bool, error) {
	ret := _m.Called(ctx, email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateCredentials provides a mock function with given fields: c
func (_m *AuthServiceInterface) ValidateCredentials(c context.Context) (services.IntUserID, model.Role, error) {
	ret := _m.Called(c)

	var r0 services.IntUserID
	if rf, ok := ret.Get(0).(func(context.Context) services.IntUserID); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(services.IntUserID)
	}

	var r1 model.Role
	if rf, ok := ret.Get(1).(func(context.Context) model.Role); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Get(1).(model.Role)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(c)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateUser provides a mock function with given fields: ctx, validationToken
func (_m *AuthServiceInterface) ValidateUser(ctx context.Context, validationToken string) (bool, error) {
	ret := _m.Called(ctx, validationToken)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, validationToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, validationToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
