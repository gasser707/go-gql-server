// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	custom "github.com/gasser707/go-gql-server/graphql/custom"

	mock "github.com/stretchr/testify/mock"

	model "github.com/gasser707/go-gql-server/graphql/model"
)

// UserResolver is an autogenerated mock type for the UserResolver type
type UserResolver struct {
	mock.Mock
}

// Images provides a mock function with given fields: ctx, obj
func (_m *UserResolver) Images(ctx context.Context, obj *custom.User) ([]*custom.Image, error) {
	ret := _m.Called(ctx, obj)

	var r0 []*custom.Image
	if rf, ok := ret.Get(0).(func(context.Context, *custom.User) []*custom.Image); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*custom.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *custom.User) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Role provides a mock function with given fields: ctx, obj
func (_m *UserResolver) Role(ctx context.Context, obj *custom.User) (model.Role, error) {
	ret := _m.Called(ctx, obj)

	var r0 model.Role
	if rf, ok := ret.Get(0).(func(context.Context, *custom.User) model.Role); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Get(0).(model.Role)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *custom.User) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
