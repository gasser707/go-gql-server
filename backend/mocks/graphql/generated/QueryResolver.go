// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	custom "github.com/gasser707/go-gql-server/graphql/custom"

	mock "github.com/stretchr/testify/mock"

	model "github.com/gasser707/go-gql-server/graphql/model"
)

// QueryResolver is an autogenerated mock type for the QueryResolver type
type QueryResolver struct {
	mock.Mock
}

// Images provides a mock function with given fields: ctx, input
func (_m *QueryResolver) Images(ctx context.Context, input *model.ImageFilterInput) ([]*custom.Image, error) {
	ret := _m.Called(ctx, input)

	var r0 []*custom.Image
	if rf, ok := ret.Get(0).(func(context.Context, *model.ImageFilterInput) []*custom.Image); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*custom.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ImageFilterInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sales provides a mock function with given fields: ctx
func (_m *QueryResolver) Sales(ctx context.Context) ([]*custom.Sale, error) {
	ret := _m.Called(ctx)

	var r0 []*custom.Sale
	if rf, ok := ret.Get(0).(func(context.Context) []*custom.Sale); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*custom.Sale)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: ctx, input
func (_m *QueryResolver) Users(ctx context.Context, input *model.UserFilterInput) ([]*custom.User, error) {
	ret := _m.Called(ctx, input)

	var r0 []*custom.User
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserFilterInput) []*custom.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*custom.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.UserFilterInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
