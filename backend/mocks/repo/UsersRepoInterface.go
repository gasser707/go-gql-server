// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	databases "github.com/gasser707/go-gql-server/databases/models"
	mock "github.com/stretchr/testify/mock"
)

// UsersRepoInterface is an autogenerated mock type for the UsersRepoInterface type
type UsersRepoInterface struct {
	mock.Mock
}

// CountByEmail provides a mock function with given fields: email
func (_m *UsersRepoInterface) CountByEmail(email string) (int, error) {
	ret := _m.Called(email)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: insertedUser
func (_m *UsersRepoInterface) Create(insertedUser *databases.User) (int64, error) {
	ret := _m.Called(insertedUser)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*databases.User) int64); ok {
		r0 = rf(insertedUser)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*databases.User) error); ok {
		r1 = rf(insertedUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *UsersRepoInterface) GetAll() ([]databases.User, error) {
	ret := _m.Called()

	var r0 []databases.User
	if rf, ok := ret.Get(0).(func() []databases.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]databases.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *UsersRepoInterface) GetByEmail(email string) (*databases.User, error) {
	ret := _m.Called(email)

	var r0 *databases.User
	if rf, ok := ret.Get(0).(func(string) *databases.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databases.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *UsersRepoInterface) GetById(id int) (*databases.User, error) {
	ret := _m.Called(id)

	var r0 *databases.User
	if rf, ok := ret.Get(0).(func(int) *databases.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databases.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: username
func (_m *UsersRepoInterface) GetByUsername(username string) ([]databases.User, error) {
	ret := _m.Called(username)

	var r0 []databases.User
	if rf, ok := ret.Get(0).(func(string) []databases.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]databases.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, updatedUser
func (_m *UsersRepoInterface) Update(id int, updatedUser *databases.User) error {
	ret := _m.Called(id, updatedUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *databases.User) error); ok {
		r0 = rf(id, updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
