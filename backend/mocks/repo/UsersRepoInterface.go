// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	databases "github.com/gasser707/go-gql-server/databases/models"
	mock "github.com/stretchr/testify/mock"
)

// UsersRepoInterface is an autogenerated mock type for the UsersRepoInterface type
type UsersRepoInterface struct {
	mock.Mock
}

// CountByEmail provides a mock function with given fields: ctx, email
func (_m *UsersRepoInterface) CountByEmail(ctx context.Context, email string) (int, error) {
	ret := _m.Called(ctx, email)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, insertedUser
func (_m *UsersRepoInterface) Create(ctx context.Context, insertedUser *databases.User) (int64, error) {
	ret := _m.Called(ctx, insertedUser)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *databases.User) int64); ok {
		r0 = rf(ctx, insertedUser)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *databases.User) error); ok {
		r1 = rf(ctx, insertedUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *UsersRepoInterface) GetAll(ctx context.Context) ([]databases.User, error) {
	ret := _m.Called(ctx)

	var r0 []databases.User
	if rf, ok := ret.Get(0).(func(context.Context) []databases.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]databases.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UsersRepoInterface) GetByEmail(ctx context.Context, email string) (*databases.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *databases.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *databases.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databases.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *UsersRepoInterface) GetById(ctx context.Context, id int) (*databases.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *databases.User
	if rf, ok := ret.Get(0).(func(context.Context, int) *databases.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databases.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *UsersRepoInterface) GetByUsername(ctx context.Context, username string) ([]databases.User, error) {
	ret := _m.Called(ctx, username)

	var r0 []databases.User
	if rf, ok := ret.Get(0).(func(context.Context, string) []databases.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]databases.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, updatedUser
func (_m *UsersRepoInterface) Update(ctx context.Context, id int, updatedUser *databases.User) error {
	ret := _m.Called(ctx, id, updatedUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *databases.User) error); ok {
		r0 = rf(ctx, id, updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
