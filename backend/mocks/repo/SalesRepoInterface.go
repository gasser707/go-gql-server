// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	databases "github.com/gasser707/go-gql-server/databases/models"
	mock "github.com/stretchr/testify/mock"
)

// SalesRepoInterface is an autogenerated mock type for the SalesRepoInterface type
type SalesRepoInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, sale
func (_m *SalesRepoInterface) Create(ctx context.Context, sale *databases.Sale) (int64, error) {
	ret := _m.Called(ctx, sale)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *databases.Sale) int64); ok {
		r0 = rf(ctx, sale)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *databases.Sale) error); ok {
		r1 = rf(ctx, sale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, userId
func (_m *SalesRepoInterface) GetAll(ctx context.Context, userId int) ([]databases.Sale, error) {
	ret := _m.Called(ctx, userId)

	var r0 []databases.Sale
	if rf, ok := ret.Get(0).(func(context.Context, int) []databases.Sale); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]databases.Sale)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageById provides a mock function with given fields: ctx, imgId, userId
func (_m *SalesRepoInterface) GetImageById(ctx context.Context, imgId int, userId int) (*databases.Image, error) {
	ret := _m.Called(ctx, imgId, userId)

	var r0 *databases.Image
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *databases.Image); ok {
		r0 = rf(ctx, imgId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databases.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, imgId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
