// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	databases "github.com/gasser707/go-gql-server/databases/models"
	mock "github.com/stretchr/testify/mock"
)

// ImagesRepoInterface is an autogenerated mock type for the ImagesRepoInterface type
type ImagesRepoInterface struct {
	mock.Mock
}

// CountImageSales provides a mock function with given fields: imgId
func (_m *ImagesRepoInterface) CountImageSales(imgId int) (int, error) {
	ret := _m.Called(imgId)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(imgId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(imgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: dbImg
func (_m *ImagesRepoInterface) Create(dbImg *databases.Image) (int64, error) {
	ret := _m.Called(dbImg)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*databases.Image) int64); ok {
		r0 = rf(dbImg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*databases.Image) error); ok {
		r1 = rf(dbImg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: imgId, userId
func (_m *ImagesRepoInterface) Delete(imgId int, userId int) error {
	ret := _m.Called(imgId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(imgId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteImageLabels provides a mock function with given fields: imgId
func (_m *ImagesRepoInterface) DeleteImageLabels(imgId int) error {
	ret := _m.Called(imgId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(imgId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPublic provides a mock function with given fields: ctx
func (_m *ImagesRepoInterface) GetAllPublic(ctx context.Context) ([]*databases.Image, error) {
	ret := _m.Called(ctx)

	var r0 []*databases.Image
	if rf, ok := ret.Get(0).(func(context.Context) []*databases.Image); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databases.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByFilter provides a mock function with given fields: filter
func (_m *ImagesRepoInterface) GetByFilter(filter string) ([]*databases.Image, error) {
	ret := _m.Called(filter)

	var r0 []*databases.Image
	if rf, ok := ret.Get(0).(func(string) []*databases.Image); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databases.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: imgId, userId
func (_m *ImagesRepoInterface) GetById(imgId int, userId int) (*databases.Image, []string, error) {
	ret := _m.Called(imgId, userId)

	var r0 *databases.Image
	if rf, ok := ret.Get(0).(func(int, int) *databases.Image); ok {
		r0 = rf(imgId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databases.Image)
		}
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(int, int) []string); ok {
		r1 = rf(imgId, userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(imgId, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetImageIfOwner provides a mock function with given fields: imgId, userId
func (_m *ImagesRepoInterface) GetImageIfOwner(imgId int, userId int) (*databases.Image, error) {
	ret := _m.Called(imgId, userId)

	var r0 *databases.Image
	if rf, ok := ret.Get(0).(func(int, int) *databases.Image); ok {
		r0 = rf(imgId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databases.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(imgId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageLabels provides a mock function with given fields: imgId
func (_m *ImagesRepoInterface) GetImageLabels(imgId int) ([]string, error) {
	ret := _m.Called(imgId)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(imgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(imgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertImageLabels provides a mock function with given fields: imgId, labels
func (_m *ImagesRepoInterface) InsertImageLabels(imgId int, labels []*databases.Label) error {
	ret := _m.Called(imgId, labels)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []*databases.Label) error); ok {
		r0 = rf(imgId, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, img
func (_m *ImagesRepoInterface) Update(id int, img *databases.Image) error {
	ret := _m.Called(id, img)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *databases.Image) error); ok {
		r0 = rf(id, img)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// checkUserBought provides a mock function with given fields: imgId, userId
func (_m *ImagesRepoInterface) checkUserBought(imgId int, userId int) bool {
	ret := _m.Called(imgId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(imgId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
