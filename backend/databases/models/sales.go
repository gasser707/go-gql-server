// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package databases

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sale is an object representing the database table.
type Sale struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ImageID   int       `boil:"image_id" json:"image_id" toml:"image_id" yaml:"image_id"`
	BuyerID   int       `boil:"buyer_id" json:"buyer_id" toml:"buyer_id" yaml:"buyer_id"`
	SellerID  int       `boil:"seller_id" json:"seller_id" toml:"seller_id" yaml:"seller_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Price     float64   `boil:"price" json:"price" toml:"price" yaml:"price"`

	R *saleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L saleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SaleColumns = struct {
	ID        string
	ImageID   string
	BuyerID   string
	SellerID  string
	CreatedAt string
	Price     string
}{
	ID:        "id",
	ImageID:   "image_id",
	BuyerID:   "buyer_id",
	SellerID:  "seller_id",
	CreatedAt: "created_at",
	Price:     "price",
}

var SaleTableColumns = struct {
	ID        string
	ImageID   string
	BuyerID   string
	SellerID  string
	CreatedAt string
	Price     string
}{
	ID:        "sales.id",
	ImageID:   "sales.image_id",
	BuyerID:   "sales.buyer_id",
	SellerID:  "sales.seller_id",
	CreatedAt: "sales.created_at",
	Price:     "sales.price",
}

// Generated where

var SaleWhere = struct {
	ID        whereHelperint
	ImageID   whereHelperint
	BuyerID   whereHelperint
	SellerID  whereHelperint
	CreatedAt whereHelpertime_Time
	Price     whereHelperfloat64
}{
	ID:        whereHelperint{field: "`sales`.`id`"},
	ImageID:   whereHelperint{field: "`sales`.`image_id`"},
	BuyerID:   whereHelperint{field: "`sales`.`buyer_id`"},
	SellerID:  whereHelperint{field: "`sales`.`seller_id`"},
	CreatedAt: whereHelpertime_Time{field: "`sales`.`created_at`"},
	Price:     whereHelperfloat64{field: "`sales`.`price`"},
}

// SaleRels is where relationship names are stored.
var SaleRels = struct {
	Buyer  string
	Image  string
	Seller string
}{
	Buyer:  "Buyer",
	Image:  "Image",
	Seller: "Seller",
}

// saleR is where relationships are stored.
type saleR struct {
	Buyer  *User  `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Image  *Image `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	Seller *User  `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
}

// NewStruct creates a new relationship struct
func (*saleR) NewStruct() *saleR {
	return &saleR{}
}

// saleL is where Load methods for each relationship are stored.
type saleL struct{}

var (
	saleAllColumns            = []string{"id", "image_id", "buyer_id", "seller_id", "created_at", "price"}
	saleColumnsWithoutDefault = []string{"image_id", "buyer_id", "seller_id", "price"}
	saleColumnsWithDefault    = []string{"id", "created_at"}
	salePrimaryKeyColumns     = []string{"id"}
)

type (
	// SaleSlice is an alias for a slice of pointers to Sale.
	// This should almost always be used instead of []Sale.
	SaleSlice []*Sale
	// SaleHook is the signature for custom Sale hook methods
	SaleHook func(context.Context, boil.ContextExecutor, *Sale) error

	saleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	saleType                 = reflect.TypeOf(&Sale{})
	saleMapping              = queries.MakeStructMapping(saleType)
	salePrimaryKeyMapping, _ = queries.BindMapping(saleType, saleMapping, salePrimaryKeyColumns)
	saleInsertCacheMut       sync.RWMutex
	saleInsertCache          = make(map[string]insertCache)
	saleUpdateCacheMut       sync.RWMutex
	saleUpdateCache          = make(map[string]updateCache)
	saleUpsertCacheMut       sync.RWMutex
	saleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var saleBeforeInsertHooks []SaleHook
var saleBeforeUpdateHooks []SaleHook
var saleBeforeDeleteHooks []SaleHook
var saleBeforeUpsertHooks []SaleHook

var saleAfterInsertHooks []SaleHook
var saleAfterSelectHooks []SaleHook
var saleAfterUpdateHooks []SaleHook
var saleAfterDeleteHooks []SaleHook
var saleAfterUpsertHooks []SaleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sale) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sale) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sale) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sale) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sale) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sale) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sale) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sale) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sale) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSaleHook registers your hook function for all future operations.
func AddSaleHook(hookPoint boil.HookPoint, saleHook SaleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		saleBeforeInsertHooks = append(saleBeforeInsertHooks, saleHook)
	case boil.BeforeUpdateHook:
		saleBeforeUpdateHooks = append(saleBeforeUpdateHooks, saleHook)
	case boil.BeforeDeleteHook:
		saleBeforeDeleteHooks = append(saleBeforeDeleteHooks, saleHook)
	case boil.BeforeUpsertHook:
		saleBeforeUpsertHooks = append(saleBeforeUpsertHooks, saleHook)
	case boil.AfterInsertHook:
		saleAfterInsertHooks = append(saleAfterInsertHooks, saleHook)
	case boil.AfterSelectHook:
		saleAfterSelectHooks = append(saleAfterSelectHooks, saleHook)
	case boil.AfterUpdateHook:
		saleAfterUpdateHooks = append(saleAfterUpdateHooks, saleHook)
	case boil.AfterDeleteHook:
		saleAfterDeleteHooks = append(saleAfterDeleteHooks, saleHook)
	case boil.AfterUpsertHook:
		saleAfterUpsertHooks = append(saleAfterUpsertHooks, saleHook)
	}
}

// One returns a single sale record from the query.
func (q saleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sale, error) {
	o := &Sale{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "databases: failed to execute a one query for sales")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Sale records from the query.
func (q saleQuery) All(ctx context.Context, exec boil.ContextExecutor) (SaleSlice, error) {
	var o []*Sale

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "databases: failed to assign all query results to Sale slice")
	}

	if len(saleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Sale records in the query.
func (q saleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "databases: failed to count sales rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q saleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "databases: failed to check if sales exists")
	}

	return count > 0, nil
}

// Buyer pointed to by the foreign key.
func (o *Sale) Buyer(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BuyerID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// Image pointed to by the foreign key.
func (o *Sale) Image(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	query := Images(queryMods...)
	queries.SetFrom(query.Query, "`images`")

	return query
}

// Seller pointed to by the foreign key.
func (o *Sale) Seller(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SellerID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// LoadBuyer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleL) LoadBuyer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		object = maybeSale.(*Sale)
	} else {
		slice = *maybeSale.(*[]*Sale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.BuyerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if a == obj.BuyerID {
					continue Outer
				}
			}

			args = append(args, obj.BuyerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(saleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Buyer = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.BuyerSales = append(foreign.R.BuyerSales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BuyerID == foreign.ID {
				local.R.Buyer = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.BuyerSales = append(foreign.R.BuyerSales, local)
				break
			}
		}
	}

	return nil
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		object = maybeSale.(*Sale)
	} else {
		slice = *maybeSale.(*[]*Sale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.ImageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if a == obj.ImageID {
					continue Outer
				}
			}

			args = append(args, obj.ImageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(saleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.Sales = append(foreign.R.Sales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImageID == foreign.ID {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.Sales = append(foreign.R.Sales, local)
				break
			}
		}
	}

	return nil
}

// LoadSeller allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleL) LoadSeller(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		object = maybeSale.(*Sale)
	} else {
		slice = *maybeSale.(*[]*Sale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.SellerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if a == obj.SellerID {
					continue Outer
				}
			}

			args = append(args, obj.SellerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(saleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Seller = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SellerSales = append(foreign.R.SellerSales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SellerID == foreign.ID {
				local.R.Seller = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SellerSales = append(foreign.R.SellerSales, local)
				break
			}
		}
	}

	return nil
}

// SetBuyer of the sale to the related item.
// Sets o.R.Buyer to related.
// Adds o to related.R.BuyerSales.
func (o *Sale) SetBuyer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sales` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"buyer_id"}),
		strmangle.WhereClause("`", "`", 0, salePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BuyerID = related.ID
	if o.R == nil {
		o.R = &saleR{
			Buyer: related,
		}
	} else {
		o.R.Buyer = related
	}

	if related.R == nil {
		related.R = &userR{
			BuyerSales: SaleSlice{o},
		}
	} else {
		related.R.BuyerSales = append(related.R.BuyerSales, o)
	}

	return nil
}

// SetImage of the sale to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.Sales.
func (o *Sale) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sales` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"image_id"}),
		strmangle.WhereClause("`", "`", 0, salePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImageID = related.ID
	if o.R == nil {
		o.R = &saleR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &imageR{
			Sales: SaleSlice{o},
		}
	} else {
		related.R.Sales = append(related.R.Sales, o)
	}

	return nil
}

// SetSeller of the sale to the related item.
// Sets o.R.Seller to related.
// Adds o to related.R.SellerSales.
func (o *Sale) SetSeller(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sales` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"seller_id"}),
		strmangle.WhereClause("`", "`", 0, salePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SellerID = related.ID
	if o.R == nil {
		o.R = &saleR{
			Seller: related,
		}
	} else {
		o.R.Seller = related
	}

	if related.R == nil {
		related.R = &userR{
			SellerSales: SaleSlice{o},
		}
	} else {
		related.R.SellerSales = append(related.R.SellerSales, o)
	}

	return nil
}

// Sales retrieves all the records using an executor.
func Sales(mods ...qm.QueryMod) saleQuery {
	mods = append(mods, qm.From("`sales`"))
	return saleQuery{NewQuery(mods...)}
}

// FindSale retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSale(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Sale, error) {
	saleObj := &Sale{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sales` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, saleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "databases: unable to select from sales")
	}

	if err = saleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return saleObj, err
	}

	return saleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sale) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("databases: no sales provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(saleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	saleInsertCacheMut.RLock()
	cache, cached := saleInsertCache[key]
	saleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			saleAllColumns,
			saleColumnsWithDefault,
			saleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(saleType, saleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(saleType, saleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sales` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sales` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sales` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, salePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "databases: unable to insert into sales")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == saleMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "databases: unable to populate default values for sales")
	}

CacheNoHooks:
	if !cached {
		saleInsertCacheMut.Lock()
		saleInsertCache[key] = cache
		saleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Sale.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sale) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	saleUpdateCacheMut.RLock()
	cache, cached := saleUpdateCache[key]
	saleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			saleAllColumns,
			salePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("databases: unable to update sales, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sales` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, salePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(saleType, saleMapping, append(wl, salePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "databases: unable to update sales row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "databases: failed to get rows affected by update for sales")
	}

	if !cached {
		saleUpdateCacheMut.Lock()
		saleUpdateCache[key] = cache
		saleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q saleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "databases: unable to update all for sales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "databases: unable to retrieve rows affected for sales")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SaleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("databases: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sales` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "databases: unable to update all in sale slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "databases: unable to retrieve rows affected all in update all sale")
	}
	return rowsAff, nil
}

var mySQLSaleUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sale) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("databases: no sales provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(saleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSaleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	saleUpsertCacheMut.RLock()
	cache, cached := saleUpsertCache[key]
	saleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			saleAllColumns,
			saleColumnsWithDefault,
			saleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			saleAllColumns,
			salePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("databases: unable to upsert sales, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sales`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sales` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(saleType, saleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(saleType, saleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "databases: unable to upsert for sales")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == saleMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(saleType, saleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "databases: unable to retrieve unique values for sales")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "databases: unable to populate default values for sales")
	}

CacheNoHooks:
	if !cached {
		saleUpsertCacheMut.Lock()
		saleUpsertCache[key] = cache
		saleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Sale record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sale) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("databases: no Sale provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), salePrimaryKeyMapping)
	sql := "DELETE FROM `sales` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "databases: unable to delete from sales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "databases: failed to get rows affected by delete for sales")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q saleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("databases: no saleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "databases: unable to delete all from sales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "databases: failed to get rows affected by deleteall for sales")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SaleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(saleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sales` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "databases: unable to delete all from sale slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "databases: failed to get rows affected by deleteall for sales")
	}

	if len(saleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sale) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSale(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SaleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SaleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sales`.* FROM `sales` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "databases: unable to reload all in SaleSlice")
	}

	*o = slice

	return nil
}

// SaleExists checks if the Sale row exists.
func SaleExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sales` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "databases: unable to check if sales exists")
	}

	return exists, nil
}
