enum Role {
    ADMIN
    USER
    MODERATOR
}

type User {
    id: ID!
    username: String!
    email: String!
    role: Role!
    bio: String!
	  avatar: String!
    joined: Time
    images: [Image!]!
}

type Sale {
    id: ID!
    image: Image!
    buyer: User!
    seller: User!
    time: Time
    price: Float!
}


type Image {
    id: ID!
    title: String!
    description: String!
    user: User!
    labels: [String!]!
    url: String!
    private: Boolean!
    forSale: Boolean!
    created: Time
    price: Float!
}

type Query {
    images(input: ImageFilterInput): [Image!]! 
    users(input: UserFilterInput): [User!]! 
}

input ImageFilterInput {
  id: ID
  userId: ID
  title: String
  description: String
  labels: [String!]
  private: Boolean
  forSale: Boolean
  price: Float
}

input UserFilterInput {
    id: ID
    username: String
    email: String
    role: Role
    bio: String
}


input NewUserInput {
  username: String!
  email: String!
  password: String!
  bio: String!
  avatar: Upload!
}

input UpdateUserInput {
    username: String!
    email: String!
    bio: String!
    avatar: Upload
}

input NewImageInput {
  title: String!
  description: String!
  labels: [String!]!
  file: Upload!
  private: Boolean!
  forSale: Boolean!
  price: Float!
}

input UpdateImageInput {
  id: ID!
  title: String!
  description: String!
  labels: [String!]
  private: Boolean!
  forSale: Boolean!
  price: Float!
}

input BuyImageInput {
  imageId: ID!
  price: Float!
}

input DeleteImageInput{
  id: ID!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation{
  registerUser(input: NewUserInput!): User! 
  updateUser(input: UpdateUserInput!): User! 
  uploadImages(input: [NewImageInput!]!): [Image!]! 
  deleteImages(input: [DeleteImageInput!]!): Boolean! 
  updateImage(input: UpdateImageInput!): Image! 
  buyImage(input: BuyImageInput): Sale! 
  login(input: LoginInput!): Boolean!
  logout(input: Boolean ):Boolean! 
}

scalar Time
scalar Upload

